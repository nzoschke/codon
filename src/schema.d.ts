/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/health": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * func1
     * @description #### Controller:
     *
     *     `github.com/nzoschke/codon/pkg/api.NewServer.func1`
     *
     *     #### Middlewares:
     *
     *     - `github.com/go-fuego/fuego.defaultLogger.middleware`
     *
     *     ---
     */
    get: operations["GET_/api/health"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/books/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * get all books
     * @description #### Controller:
     *
     *     `github.com/nzoschke/codon/pkg/domains/books.BooksResources.getAllBooks`
     *
     *     #### Middlewares:
     *
     *     - `github.com/go-fuego/fuego.defaultLogger.middleware`
     *
     *     ---
     */
    get: operations["GET_/books/"];
    put?: never;
    /**
     * post books
     * @description #### Controller:
     *
     *     `github.com/nzoschke/codon/pkg/domains/books.BooksResources.postBooks`
     *
     *     #### Middlewares:
     *
     *     - `github.com/go-fuego/fuego.defaultLogger.middleware`
     *
     *     ---
     */
    post: operations["POST_/books/"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/books/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * get books
     * @description #### Controller:
     *
     *     `github.com/nzoschke/codon/pkg/domains/books.BooksResources.getBooks`
     *
     *     #### Middlewares:
     *
     *     - `github.com/go-fuego/fuego.defaultLogger.middleware`
     *
     *     ---
     */
    get: operations["GET_/books/:id"];
    /**
     * put books
     * @description #### Controller:
     *
     *     `github.com/nzoschke/codon/pkg/domains/books.BooksResources.putBooks`
     *
     *     #### Middlewares:
     *
     *     - `github.com/go-fuego/fuego.defaultLogger.middleware`
     *
     *     ---
     */
    put: operations["PUT_/books/:id"];
    post?: never;
    /**
     * delete books
     * @description #### Controller:
     *
     *     `github.com/nzoschke/codon/pkg/domains/books.BooksResources.deleteBooks`
     *
     *     #### Middlewares:
     *
     *     - `github.com/go-fuego/fuego.defaultLogger.middleware`
     *
     *     ---
     */
    delete: operations["DELETE_/books/:id"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @description Books schema */
    Books: {
      id?: string;
      name?: string;
    };
    /** @description BooksCreate schema */
    BooksCreate: {
      name?: string;
    };
    /** @description BooksUpdate schema */
    BooksUpdate: {
      name?: string;
    };
    /** @description HTTPError schema */
    HTTPError: {
      /** @description Human readable error message */
      detail?: string | null;
      errors?: {
        /** @description Additional information about the error */
        more?: {
          [key: string]: unknown;
        } | null;
        /** @description For example, name of the parameter that caused the error */
        name?: string;
        /** @description Human readable error message */
        reason?: string;
      }[] | null;
      instance?: string | null;
      /**
       * @description HTTP status code
       * @example 403
       */
      status?: number | null;
      /** @description Short title of the error */
      title?: string | null;
      /** @description URL of the error type. Can be used to lookup the error in a documentation */
      type?: string | null;
    };
    /** @description string schema */
    string: string;
    /** @description unknown-interface schema */
    "unknown-interface": unknown;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  "GET_/api/health": {
    parameters: {
      query?: never;
      header?: {
        Accept?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["string"];
          "application/xml": components["schemas"]["string"];
        };
      };
      /** @description Bad Request _(validation or deserialization error)_ */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPError"];
          "application/xml": components["schemas"]["HTTPError"];
        };
      };
      /** @description Internal Server Error _(panics)_ */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPError"];
          "application/xml": components["schemas"]["HTTPError"];
        };
      };
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "GET_/books/": {
    parameters: {
      query?: never;
      header?: {
        Accept?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Books"][];
          "application/xml": components["schemas"]["Books"][];
        };
      };
      /** @description Bad Request _(validation or deserialization error)_ */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPError"];
          "application/xml": components["schemas"]["HTTPError"];
        };
      };
      /** @description Internal Server Error _(panics)_ */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPError"];
          "application/xml": components["schemas"]["HTTPError"];
        };
      };
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "POST_/books/": {
    parameters: {
      query?: never;
      header?: {
        Accept?: string;
      };
      path?: never;
      cookie?: never;
    };
    /** @description Request body for books.BooksCreate */
    requestBody: {
      content: {
        "*/*": components["schemas"]["BooksCreate"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Books"];
          "application/xml": components["schemas"]["Books"];
        };
      };
      /** @description Bad Request _(validation or deserialization error)_ */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPError"];
          "application/xml": components["schemas"]["HTTPError"];
        };
      };
      /** @description Internal Server Error _(panics)_ */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPError"];
          "application/xml": components["schemas"]["HTTPError"];
        };
      };
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "GET_/books/:id": {
    parameters: {
      query?: never;
      header?: {
        Accept?: string;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Books"];
          "application/xml": components["schemas"]["Books"];
        };
      };
      /** @description Bad Request _(validation or deserialization error)_ */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPError"];
          "application/xml": components["schemas"]["HTTPError"];
        };
      };
      /** @description Internal Server Error _(panics)_ */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPError"];
          "application/xml": components["schemas"]["HTTPError"];
        };
      };
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "PUT_/books/:id": {
    parameters: {
      query?: never;
      header?: {
        Accept?: string;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    /** @description Request body for books.BooksUpdate */
    requestBody: {
      content: {
        "*/*": components["schemas"]["BooksUpdate"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Books"];
          "application/xml": components["schemas"]["Books"];
        };
      };
      /** @description Bad Request _(validation or deserialization error)_ */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPError"];
          "application/xml": components["schemas"]["HTTPError"];
        };
      };
      /** @description Internal Server Error _(panics)_ */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPError"];
          "application/xml": components["schemas"]["HTTPError"];
        };
      };
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "DELETE_/books/:id": {
    parameters: {
      query?: never;
      header?: {
        Accept?: string;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["unknown-interface"];
          "application/xml": components["schemas"]["unknown-interface"];
        };
      };
      /** @description Bad Request _(validation or deserialization error)_ */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPError"];
          "application/xml": components["schemas"]["HTTPError"];
        };
      };
      /** @description Internal Server Error _(panics)_ */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPError"];
          "application/xml": components["schemas"]["HTTPError"];
        };
      };
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
