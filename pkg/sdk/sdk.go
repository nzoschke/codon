// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package sdk

import (
	"context"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Books Books schema
type Books struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// BooksCreate BooksCreate schema
type BooksCreate struct {
	Name *string `json:"name,omitempty"`
}

// BooksUpdate BooksUpdate schema
type BooksUpdate struct {
	Name *string `json:"name,omitempty"`
}

// HTTPError HTTPError schema
type HTTPError struct {
	// Detail Human readable error message
	Detail *string `json:"detail"`
	Errors *[]struct {
		// More Additional information about the error
		More *map[string]interface{} `json:"more"`

		// Name For example, name of the parameter that caused the error
		Name *string `json:"name,omitempty"`

		// Reason Human readable error message
		Reason *string `json:"reason,omitempty"`
	} `json:"errors"`
	Instance *string `json:"instance"`

	// Status HTTP status code
	Status *int `json:"status"`

	// Title Short title of the error
	Title *string `json:"title"`

	// Type URL of the error type. Can be used to lookup the error in a documentation
	Type *string `json:"type"`
}

// String string schema
type String = string

// UnknownInterface unknown-interface schema
type UnknownInterface = interface{}

// GETapihealthParams defines parameters for GETapihealth.
type GETapihealthParams struct {
	Accept *string `json:"Accept,omitempty"`
}

// GETbooksParams defines parameters for GETbooks.
type GETbooksParams struct {
	Accept *string `json:"Accept,omitempty"`
}

// POSTbooksParams defines parameters for POSTbooks.
type POSTbooksParams struct {
	Accept *string `json:"Accept,omitempty"`
}

// DELETEbooksIdParams defines parameters for DELETEbooksId.
type DELETEbooksIdParams struct {
	Accept *string `json:"Accept,omitempty"`
}

// GETbooksIdParams defines parameters for GETbooksId.
type GETbooksIdParams struct {
	Accept *string `json:"Accept,omitempty"`
}

// PUTbooksIdParams defines parameters for PUTbooksId.
type PUTbooksIdParams struct {
	Accept *string `json:"Accept,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GETapihealth request
	GETapihealth(ctx context.Context, params *GETapihealthParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETbooks request
	GETbooks(ctx context.Context, params *GETbooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTbooksWithBody request with any body
	POSTbooksWithBody(ctx context.Context, params *POSTbooksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEbooksId request
	DELETEbooksId(ctx context.Context, id string, params *DELETEbooksIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETbooksId request
	GETbooksId(ctx context.Context, id string, params *GETbooksIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTbooksIdWithBody request with any body
	PUTbooksIdWithBody(ctx context.Context, id string, params *PUTbooksIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GETapihealth(ctx context.Context, params *GETapihealthParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETapihealthRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETbooks(ctx context.Context, params *GETbooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETbooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTbooksWithBody(ctx context.Context, params *POSTbooksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTbooksRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEbooksId(ctx context.Context, id string, params *DELETEbooksIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEbooksIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETbooksId(ctx context.Context, id string, params *GETbooksIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETbooksIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTbooksIdWithBody(ctx context.Context, id string, params *PUTbooksIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTbooksIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGETapihealthRequest generates requests for GETapihealth
func NewGETapihealthRequest(server string, params *GETapihealthParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

	}

	return req, nil
}

// NewGETbooksRequest generates requests for GETbooks
func NewGETbooksRequest(server string, params *GETbooksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

	}

	return req, nil
}

// NewPOSTbooksRequestWithBody generates requests for POSTbooks with any type of body
func NewPOSTbooksRequestWithBody(server string, params *POSTbooksParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

	}

	return req, nil
}

// NewDELETEbooksIdRequest generates requests for DELETEbooksId
func NewDELETEbooksIdRequest(server string, id string, params *DELETEbooksIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

	}

	return req, nil
}

// NewGETbooksIdRequest generates requests for GETbooksId
func NewGETbooksIdRequest(server string, id string, params *GETbooksIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

	}

	return req, nil
}

// NewPUTbooksIdRequestWithBody generates requests for PUTbooksId with any type of body
func NewPUTbooksIdRequestWithBody(server string, id string, params *PUTbooksIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GETapihealthWithResponse request
	GETapihealthWithResponse(ctx context.Context, params *GETapihealthParams, reqEditors ...RequestEditorFn) (*GETapihealthResponse, error)

	// GETbooksWithResponse request
	GETbooksWithResponse(ctx context.Context, params *GETbooksParams, reqEditors ...RequestEditorFn) (*GETbooksResponse, error)

	// POSTbooksWithBodyWithResponse request with any body
	POSTbooksWithBodyWithResponse(ctx context.Context, params *POSTbooksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTbooksResponse, error)

	// DELETEbooksIdWithResponse request
	DELETEbooksIdWithResponse(ctx context.Context, id string, params *DELETEbooksIdParams, reqEditors ...RequestEditorFn) (*DELETEbooksIdResponse, error)

	// GETbooksIdWithResponse request
	GETbooksIdWithResponse(ctx context.Context, id string, params *GETbooksIdParams, reqEditors ...RequestEditorFn) (*GETbooksIdResponse, error)

	// PUTbooksIdWithBodyWithResponse request with any body
	PUTbooksIdWithBodyWithResponse(ctx context.Context, id string, params *PUTbooksIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTbooksIdResponse, error)
}

type GETapihealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *String
	XML200       *String
	JSON400      *HTTPError
	XML400       *HTTPError
	JSON500      *HTTPError
	XML500       *HTTPError
}

// Status returns HTTPResponse.Status
func (r GETapihealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETapihealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETbooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Books
	XML200       *[]Books
	JSON400      *HTTPError
	XML400       *HTTPError
	JSON500      *HTTPError
	XML500       *HTTPError
}

// Status returns HTTPResponse.Status
func (r GETbooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETbooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTbooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Books
	XML200       *Books
	JSON400      *HTTPError
	XML400       *HTTPError
	JSON500      *HTTPError
	XML500       *HTTPError
}

// Status returns HTTPResponse.Status
func (r POSTbooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTbooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEbooksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UnknownInterface
	XML200       *UnknownInterface
	JSON400      *HTTPError
	XML400       *HTTPError
	JSON500      *HTTPError
	XML500       *HTTPError
}

// Status returns HTTPResponse.Status
func (r DELETEbooksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEbooksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETbooksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Books
	XML200       *Books
	JSON400      *HTTPError
	XML400       *HTTPError
	JSON500      *HTTPError
	XML500       *HTTPError
}

// Status returns HTTPResponse.Status
func (r GETbooksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETbooksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTbooksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Books
	XML200       *Books
	JSON400      *HTTPError
	XML400       *HTTPError
	JSON500      *HTTPError
	XML500       *HTTPError
}

// Status returns HTTPResponse.Status
func (r PUTbooksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTbooksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GETapihealthWithResponse request returning *GETapihealthResponse
func (c *ClientWithResponses) GETapihealthWithResponse(ctx context.Context, params *GETapihealthParams, reqEditors ...RequestEditorFn) (*GETapihealthResponse, error) {
	rsp, err := c.GETapihealth(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETapihealthResponse(rsp)
}

// GETbooksWithResponse request returning *GETbooksResponse
func (c *ClientWithResponses) GETbooksWithResponse(ctx context.Context, params *GETbooksParams, reqEditors ...RequestEditorFn) (*GETbooksResponse, error) {
	rsp, err := c.GETbooks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETbooksResponse(rsp)
}

// POSTbooksWithBodyWithResponse request with arbitrary body returning *POSTbooksResponse
func (c *ClientWithResponses) POSTbooksWithBodyWithResponse(ctx context.Context, params *POSTbooksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTbooksResponse, error) {
	rsp, err := c.POSTbooksWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTbooksResponse(rsp)
}

// DELETEbooksIdWithResponse request returning *DELETEbooksIdResponse
func (c *ClientWithResponses) DELETEbooksIdWithResponse(ctx context.Context, id string, params *DELETEbooksIdParams, reqEditors ...RequestEditorFn) (*DELETEbooksIdResponse, error) {
	rsp, err := c.DELETEbooksId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEbooksIdResponse(rsp)
}

// GETbooksIdWithResponse request returning *GETbooksIdResponse
func (c *ClientWithResponses) GETbooksIdWithResponse(ctx context.Context, id string, params *GETbooksIdParams, reqEditors ...RequestEditorFn) (*GETbooksIdResponse, error) {
	rsp, err := c.GETbooksId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETbooksIdResponse(rsp)
}

// PUTbooksIdWithBodyWithResponse request with arbitrary body returning *PUTbooksIdResponse
func (c *ClientWithResponses) PUTbooksIdWithBodyWithResponse(ctx context.Context, id string, params *PUTbooksIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTbooksIdResponse, error) {
	rsp, err := c.PUTbooksIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTbooksIdResponse(rsp)
}

// ParseGETapihealthResponse parses an HTTP response from a GETapihealthWithResponse call
func ParseGETapihealthResponse(rsp *http.Response) (*GETapihealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETapihealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest String
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest String
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETbooksResponse parses an HTTP response from a GETbooksWithResponse call
func ParseGETbooksResponse(rsp *http.Response) (*GETbooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETbooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Books
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest []Books
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTbooksResponse parses an HTTP response from a POSTbooksWithResponse call
func ParsePOSTbooksResponse(rsp *http.Response) (*POSTbooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTbooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Books
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest Books
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEbooksIdResponse parses an HTTP response from a DELETEbooksIdWithResponse call
func ParseDELETEbooksIdResponse(rsp *http.Response) (*DELETEbooksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEbooksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UnknownInterface
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest UnknownInterface
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETbooksIdResponse parses an HTTP response from a GETbooksIdWithResponse call
func ParseGETbooksIdResponse(rsp *http.Response) (*GETbooksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETbooksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Books
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest Books
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTbooksIdResponse parses an HTTP response from a PUTbooksIdWithResponse call
func ParsePUTbooksIdResponse(rsp *http.Response) (*PUTbooksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTbooksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Books
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest Books
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest HTTPError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest HTTPError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}
