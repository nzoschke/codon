// Code generated by "sqlc-gen-zombiezen". DO NOT EDIT.

package q

import (
	"fmt"
	"zombiezen.com/go/sqlite"

	"time"
)

type ContactReadRes struct {
	CreatedAt time.Time `json:"created_at"`
	Email     string    `json:"email"`
	Id        int64     `json:"id"`
	Meta      []byte    `json:"meta"`
	Name      string    `json:"name"`
	Phone     string    `json:"phone"`
	UpdatedAt time.Time `json:"updated_at"`
}

type ContactReadStmt struct {
	stmt *sqlite.Stmt
}

func ContactRead(tx *sqlite.Conn) *ContactReadStmt {
	// Prepare the statement into connection cache
	stmt := tx.Prep(`
SELECT
  created_at, email, id, meta, name, phone, updated_at
FROM
  contacts
WHERE
  id = ?
LIMIT
  1
    `)
	ps := &ContactReadStmt{stmt: stmt}
	return ps
}

func (ps *ContactReadStmt) Run(
	id int64,
) (
	res *ContactReadRes,
	err error,
) {
	defer ps.stmt.Reset()

	// Bind parameters
	ps.stmt.BindInt64(1, id)

	// Execute the query
	if hasRow, err := ps.stmt.Step(); err != nil {
		return res, fmt.Errorf("failed to execute {{.Name.Lower}} SQL: %w", err)
	} else if hasRow {
		row := ContactReadRes{}
		row.CreatedAt = JulianDayToTime(ps.stmt.ColumnFloat(0))
		row.Email = ps.stmt.ColumnText(1)
		row.Id = ps.stmt.ColumnInt64(2)
		row.Meta = StmtBytesByCol(ps.stmt, 3)
		row.Name = ps.stmt.ColumnText(4)
		row.Phone = ps.stmt.ColumnText(5)
		row.UpdatedAt = JulianDayToTime(ps.stmt.ColumnFloat(6))
		res = &row
	}

	return res, nil
}

func OnceContactRead(
	tx *sqlite.Conn,
	id int64,
) (
	res *ContactReadRes,
	err error,
) {
	ps := ContactRead(tx)

	return ps.Run(
		id,
	)
}
