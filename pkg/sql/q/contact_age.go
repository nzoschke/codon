// Code generated by "sqlc-gen-zombiezen". DO NOT EDIT.

package q

import (
	"fmt"
	"zombiezen.com/go/sqlite"
)

type ContactAgeStmt struct {
	stmt *sqlite.Stmt
}

func ContactAge(tx *sqlite.Conn) *ContactAgeStmt {
	// Prepare the statement into connection cache
	stmt := tx.Prep(`
SELECT
  CAST(meta->>'$.age' AS INTEGER) AS age
FROM
  contacts
WHERE
  id = ?
LIMIT
  1
    `)
	ps := &ContactAgeStmt{stmt: stmt}
	return ps
}

func (ps *ContactAgeStmt) Run(
	id int64,
) (
	res int64,
	err error,
) {
	defer ps.stmt.Reset()

	// Bind parameters
	ps.stmt.BindInt64(1, id)

	// Execute the query
	if hasRow, err := ps.stmt.Step(); err != nil {
		return res, fmt.Errorf("failed to execute {{.Name.Lower}} SQL: %w", err)
	} else if hasRow {
		res = ps.stmt.ColumnInt64(0)
	}

	return res, nil
}

func OnceContactAge(
	tx *sqlite.Conn,
	id int64,
) (
	res int64,
	err error,
) {
	ps := ContactAge(tx)

	return ps.Run(
		id,
	)
}
