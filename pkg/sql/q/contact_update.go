// Code generated by "sqlc-gen-zombiezen". DO NOT EDIT.

package q

import (
	"fmt"
	"zombiezen.com/go/sqlite"
)

type ContactUpdateParams struct {
	Email string `json:"email"`
	Meta  []byte `json:"meta"`
	Name  string `json:"name"`
	Phone string `json:"phone"`
	Id    int64  `json:"id"`
}

type ContactUpdateStmt struct {
	stmt *sqlite.Stmt
}

func ContactUpdate(tx *sqlite.Conn) *ContactUpdateStmt {
	// Prepare the statement into connection cache
	stmt := tx.Prep(`
UPDATE
  contacts
SET
  email = ?,
  meta = ?,
  name = ?,
  phone = ?
WHERE
  id = ?
    `)
	ps := &ContactUpdateStmt{stmt: stmt}
	return ps
}

func (ps *ContactUpdateStmt) Run(
	params ContactUpdateParams,
) (
	err error,
) {
	defer ps.stmt.Reset()

	// Bind parameters
	ps.stmt.BindText(1, params.Email)
	ps.stmt.BindBytes(2, params.Meta)
	ps.stmt.BindText(3, params.Name)
	ps.stmt.BindText(4, params.Phone)
	ps.stmt.BindInt64(5, params.Id)

	// Execute the query
	if _, err := ps.stmt.Step(); err != nil {
		return fmt.Errorf("failed to execute contactupdate SQL: %w", err)
	}

	return nil
}

func OnceContactUpdate(
	tx *sqlite.Conn,
	params ContactUpdateParams,
) (
	err error,
) {
	ps := ContactUpdate(tx)

	return ps.Run(
		params,
	)
}
