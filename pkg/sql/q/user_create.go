// Code generated by "sqlc-gen-zombiezen". DO NOT EDIT.

package q

import (
	"fmt"
	"zombiezen.com/go/sqlite"

	"time"
)

type UserCreateRes struct {
	CreatedAt *time.Time `json:"created_at"`
	Email     string     `json:"email"`
	Id        int64      `json:"id"`
	Name      string     `json:"name"`
}

type UserCreateParams struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

type UserCreateStmt struct {
	stmt *sqlite.Stmt
}

func UserCreate(tx *sqlite.Conn) *UserCreateStmt {
	// Prepare the statement into connection cache
	stmt := tx.Prep(`
INSERT INTO
  users (email, name)
VALUES
  (?, ?)
RETURNING
  created_at, email, id, name
    `)
	ps := &UserCreateStmt{stmt: stmt}
	return ps
}

func (ps *UserCreateStmt) Run(
	params UserCreateParams,
) (
	res *UserCreateRes,
	err error,
) {
	defer ps.stmt.Reset()

	// Bind parameters
	ps.stmt.BindText(1, params.Email)
	ps.stmt.BindText(2, params.Name)

	// Execute the query
	if hasRow, err := ps.stmt.Step(); err != nil {
		return res, fmt.Errorf("failed to execute {{.Name.Lower}} SQL: %w", err)
	} else if hasRow {
		row := UserCreateRes{}
		isNullCreatedAt := ps.stmt.ColumnIsNull(0)
		if !isNullCreatedAt {
			tmp := JulianDayToTime(ps.stmt.ColumnFloat(0))
			row.CreatedAt = &tmp
		}
		row.Email = ps.stmt.ColumnText(1)
		row.Id = ps.stmt.ColumnInt64(2)
		row.Name = ps.stmt.ColumnText(3)
		res = &row
	}

	return res, nil
}

func OnceUserCreate(
	tx *sqlite.Conn,
	params UserCreateParams,
) (
	res *UserCreateRes,
	err error,
) {
	ps := UserCreate(tx)

	return ps.Run(
		params,
	)
}
